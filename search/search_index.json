{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pure-function-decorators","text":"<p>Try to enforece various types of function purity in Python</p>"},{"location":"#overview","title":"Overview","text":"<ul> <li>Quickstart</li> <li>Feature guide</li> <li>Reference</li> <li>Frequently asked questions</li> </ul>"},{"location":"faq/","title":"Frequently asked questions","text":""},{"location":"faq/#can-the-decorators-be-enabled-globally-similar-to-perls-strict-pragma","title":"Can the decorators be enabled globally, similar to Perl's <code>strict</code> pragma?","text":"<p>Not currently. Python does not expose a way to automatically wrap every function or method that gets imported or defined after a module loads. Each decorator in this project returns a new callable, so you must opt in on a per-function basis (or build your own helper that walks a module or class and decorates the objects you choose). The library therefore cannot enforce purity checks globally without explicit wrapping.</p>"},{"location":"faq/#could-the-descriptor-protocol-automatically-apply-the-decorators-to-methods","title":"Could the descriptor protocol automatically apply the decorators to methods?","text":"<p>Not in a general way. Python already turns functions defined on a class into descriptors, and replacing them with a custom descriptor still requires opting in for every attribute that you assign. Descriptors also do not help with module-level functions or with classes defined in third-party code. You can create a metaclass or <code>__setattr__</code> hook that decorates attributes as they are stored on a specific class hierarchy, but that only moves the opt-in boundary to \"use this special base class\" rather than providing a library-wide switch that patches every callable in the interpreter.</p>"},{"location":"features/","title":"Features","text":""},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#requirements","title":"Requirements","text":"<ul> <li>Python 3.10 to 3.13</li> </ul>"},{"location":"quickstart/#installation","title":"Installation","text":""},{"location":"quickstart/#install-from-pypi","title":"Install from pypi:","text":"<p>This will install the latest release from pypi via pip:</p> <pre><code>pip install pure-function-decorators\n</code></pre>"},{"location":"quickstart/#using","title":"Using","text":""},{"location":"reference/","title":"pure-function-decorators Reference","text":""},{"location":"reference/#pure_function_decorators","title":"pure_function_decorators","text":"<p>Public package surface for the pure-function-decorators project.</p>"}]}